{"remainingRequest":"/Users/huangjiehui/Desktop/Personal/vue/HYMall-master/node_modules/babel-loader/lib/index.js!/Users/huangjiehui/Desktop/Personal/vue/HYMall-master/src/network/axios.js","dependencies":[{"path":"/Users/huangjiehui/Desktop/Personal/vue/HYMall-master/src/network/axios.js","mtime":1584845842000},{"path":"/Users/huangjiehui/Desktop/Personal/vue/HYMall-master/node_modules/cache-loader/dist/cjs.js","mtime":1630335031083},{"path":"/Users/huangjiehui/Desktop/Personal/vue/HYMall-master/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import originAxios from 'axios';\nimport qs from 'qs';\nexport default function axios(option) {\n  return new Promise(function (resolve, reject) {\n    // 1.创建axios的实例\n    var instance = originAxios.create({\n      baseURL: 'http://123.207.32.32:8000',\n      timeout: 5000\n    }); // 配置请求和响应拦截\n\n    instance.interceptors.request.use(function (config) {\n      // console.log('来到了request拦截success中');\n      // 1.当发送网络请求时, 在页面中添加一个loading组件, 作为动画\n      // 2.某些请求要求用户必须登录, 判断用户是否有token, 如果没有token跳转到login页面\n      // 3.对请求的参数进行序列化(看服务器是否需要序列化)\n      // config.data = qs.stringify(config.data)\n      // console.log(config);\n      // 4.等等\n      return config;\n    }, function (err) {\n      // console.log('来到了request拦截failure中');\n      return err;\n    });\n    instance.interceptors.response.use(function (response) {\n      // console.log('来到了response拦截success中');\n      return response.data;\n    }, function (err) {\n      console.log('来到了response拦截failure中');\n      console.log(err);\n\n      if (err && err.response) {\n        switch (err.response.status) {\n          case 400:\n            err.message = '请求错误';\n            break;\n\n          case 401:\n            err.message = '未授权的访问';\n            break;\n        }\n      }\n\n      return err;\n    }); // 2.传入对象进行网络请求\n\n    instance(option).then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}",{"version":3,"sources":["/Users/huangjiehui/Desktop/Personal/vue/HYMall-master/src/network/axios.js"],"names":["originAxios","qs","axios","option","Promise","resolve","reject","instance","create","baseURL","timeout","interceptors","request","use","config","err","response","data","console","log","status","message","then","res","catch"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,OAAxB;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,eAAe,SAASC,KAAT,CAAeC,MAAf,EAAuB;AACrC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC;AACA,QAAMC,WAAWP,YAAYQ,MAAZ,CAAmB;AACnCC,eAAS,2BAD0B;AAEnCC,eAAS;AAF0B,KAAnB,CAAjB,CAFuC,CAOvC;;AACAH,aAASI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,kBAAU;AAC3C;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA,aAAOC,MAAP;AACA,KAZD,EAYG,eAAO;AACT;AACA,aAAOC,GAAP;AACA,KAfD;AAiBAR,aAASI,YAAT,CAAsBK,QAAtB,CAA+BH,GAA/B,CAAmC,oBAAY;AAC9C;AACA,aAAOG,SAASC,IAAhB;AACA,KAHD,EAGG,eAAO;AACTC,cAAQC,GAAR,CAAY,uBAAZ;AACGD,cAAQC,GAAR,CAAYJ,GAAZ;;AACA,UAAIA,OAAOA,IAAIC,QAAf,EAAyB;AAC3B,gBAAQD,IAAIC,QAAJ,CAAaI,MAArB;AACC,eAAK,GAAL;AACCL,gBAAIM,OAAJ,GAAc,MAAd;AACA;;AACD,eAAK,GAAL;AACCN,gBAAIM,OAAJ,GAAc,QAAd;AACA;AANF;AAQA;;AACD,aAAON,GAAP;AACA,KAjBD,EAzBuC,CA4CvC;;AACAR,aAASJ,MAAT,EAAiBmB,IAAjB,CAAsB,eAAO;AAC5BjB,cAAQkB,GAAR;AACA,KAFD,EAEGC,KAFH,CAES,eAAO;AACflB,aAAOS,GAAP;AACA,KAJD;AAKA,GAlDM,CAAP;AAmDA","sourcesContent":["import originAxios from 'axios'\nimport qs from 'qs'\n\nexport default function axios(option) {\n\treturn new Promise((resolve, reject) => {\n\t\t// 1.创建axios的实例\n\t\tconst instance = originAxios.create({\n\t\t\tbaseURL: 'http://123.207.32.32:8000',\n\t\t\ttimeout: 5000\n\t\t});\n\n\t\t// 配置请求和响应拦截\n\t\tinstance.interceptors.request.use(config => {\n\t\t\t// console.log('来到了request拦截success中');\n\t\t\t// 1.当发送网络请求时, 在页面中添加一个loading组件, 作为动画\n\n\t\t\t// 2.某些请求要求用户必须登录, 判断用户是否有token, 如果没有token跳转到login页面\n\n\t\t\t// 3.对请求的参数进行序列化(看服务器是否需要序列化)\n\t\t\t// config.data = qs.stringify(config.data)\n\t\t\t// console.log(config);\n\n\t\t\t// 4.等等\n\t\t\treturn config\n\t\t}, err => {\n\t\t\t// console.log('来到了request拦截failure中');\n\t\t\treturn err\n\t\t})\n\n\t\tinstance.interceptors.response.use(response => {\n\t\t\t// console.log('来到了response拦截success中');\n\t\t\treturn response.data\n\t\t}, err => {\n\t\t\tconsole.log('来到了response拦截failure中');\n      console.log(err);\n      if (err && err.response) {\n\t\t\t\tswitch (err.response.status) {\n\t\t\t\t\tcase 400:\n\t\t\t\t\t\terr.message = '请求错误'\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 401:\n\t\t\t\t\t\terr.message = '未授权的访问'\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn err\n\t\t})\n\n\t\t// 2.传入对象进行网络请求\n\t\tinstance(option).then(res => {\n\t\t\tresolve(res)\n\t\t}).catch(err => {\n\t\t\treject(err)\n\t\t})\n\t})\n}\n"]}]}